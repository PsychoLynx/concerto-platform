AWSTemplateFormatVersion: 2010-09-09
Description: >-
  concerto-ec2-basic-tls (2020-05-11): Standalone Concerto, everything on one instance, not monitored
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Concerto
        Parameters:
          - ConcertoVersion
          - ConcertoPassword
          - ConcertoContentURL
          - ConcertoSessionLimit
          - ConcertoTimezone
      - Label:
          default: Web
        Parameters:
          - DomainName
          - Email
          - KeyName
          - WebServerInstanceType
      - Label:
          default: Database
        Parameters:
          - DBPassword
      - Label:
          default: Network
        Parameters:
          - CIDR
          - CIDRA
    ParameterLabels:
      ConcertoVersion:
        default: Tag
      ConcertoPassword:
        default: Password
      ConcertoContentURL:
        default: URL
      ConcertoSessionLimit:
        default: Session limit
      ConcertoTimezone:
        default: Timezone
      DomainName:
        default: Domain
      Email:
        default: E-Mail
      KeyName:
        default: Key pair
      WebServerInstanceType:
        default: Instance type
      DBPassword:
        default: Password
      CIDRA:
        default: CIDR for Subnet A

Parameters:
  ConcertoVersion:
    Description: Concerto version to use. Can be any tag from https://github.com/campsych/concerto-platform, defaults to latest stable.
    Type: String
    Default: 5.0
  ConcertoPassword:
    Description: Concerto admin account password (recommended to generate a random one)
    Type: String
    NoEcho: true
    MinLength: 8
    ConstraintDescription: min. 8 characters.
  ConcertoContentURL:
    Description: URL with Concerto content backup to preload (optional).
    Type: String
    Default: .
  ConcertoSessionLimit:
    Description: How many concurrent sessions to allow (unlimited if not set).
    Type: Number
    Default: 10
  ConcertoTimezone:
    Description: Timezone to use, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    Type: String
    Default: Europe/London
  DomainName:
    Description: The domain name to be used for Concerto, you need to own it
    Type: String
    AllowedPattern: (?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]
    ConstraintDescription: must be a valid domain name.
  Email:
    Description: Your email to be used with Lets Encrypt CA
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  WebServerInstanceType:
    Description: Web server instance type.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.small
      - t3.small
      - t2.medium
      - t3.medium
      - t2.large
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  DBPassword:
    Description: Database admin account password (recommended to generate a random one, different than Concerto's)
    Type: String
    NoEcho: true
    MinLength: 8
    ConstraintDescription: min. 8 characters
  CIDR:
    Description: The private IP address range to be used for VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.10.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  CIDRA:
    Description: Address range within the VPC to be used for the subnet
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.10.0.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  RegionMap:
    us-east-1:
      ami: ami-0de53d8956e8dcf80
    us-east-2:
      ami: ami-02bcbb802e03574ba
    us-west-1:
      ami: ami-0019ef04ac50be30f
    us-west-2:
      ami: ami-061392db613a6357b
    eu-west-1:
      ami: ami-07683a44e80cd32c5
    eu-west-2:
      ami: ami-09ead922c1dad67e4
    eu-west-3:
      ami: ami-0451ae4fd8dd178f7
    eu-central-1:
      ami: ami-09def150731bdbcc2
    eu-north-1:
      ami: ami-d16fe6af
    ap-northeast-1:
      ami: ami-0f9ae750e8274075b
    ap-northeast-2:
      ami: ami-047f7b46bd6dd5d84
    ap-southeast-1:
      ami: ami-0b419c3a4b01d1859
    ap-southeast-2:
      ami: ami-04481c741a0311bbb
    ap-south-1:
      ami: ami-0889b8a448de4fc44
    ca-central-1:
      ami: ami-03338e1f67dae0168
    sa-east-1:
      ami: ami-0669a96e355eac82f

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  InboundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  InboundSSHNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 103
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  OutBoundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref NetworkAcl
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ingress via SSH, HTTP, HTTPS ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  WebServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn
            - updates
            - docker
            - tls
            - concerto
        cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
                runas=root
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        updates:
          packages:
            yum:
              yum-cron: []
          commands:
            01_config:
              command: |
                sed -ri 's/^(.*update_cmd\s*=).*$/\1 security/' yum-cron.conf
                sed -ri 's/^(.*apply_updates\s*=).*$/\1 yes/' yum-cron.conf
              cwd: /etc/yum
          services:
            sysvinit:
              yum-cron:
                enabled: true
                ensureRunning: true
        docker:
          commands:
            01_user:
              command: usermod -a -G docker ec2-user
            02_docker_compose:
              command: |
                curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        tls:
          files:
            /home/concerto/data/nginx/app.conf:
              content: !Sub |
                server {
                    listen [::]:80 default_server;
                    listen 80 default_server;

                    location /.well-known/acme-challenge/ {
                        root /var/www/certbot;
                        allow all;
                    }

                    location / {
                        return 301 https://$host$request_uri;
                    }
                }

                server {
                    listen [::]:443 ssl http2;
                    listen 443 ssl http2;
                    server_name ${DomainName};

                    ssl_certificate /etc/letsencrypt/dummy/${DomainName}/fullchain.pem;
                    ssl_certificate_key /etc/letsencrypt/dummy/${DomainName}/privkey.pem;
                    ssl_protocols TLSv1.2 TLSv1.3;
                    ssl_prefer_server_ciphers on;
                    ssl_dhparam /etc/letsencrypt/dhparam.pem;
                    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
                    ssl_session_timeout 1d;
                    ssl_session_cache shared:SSL:50m;
                    add_header Strict-Transport-Security max-age=15768000;

                    client_max_body_size 50M;

                    location / {
                        proxy_pass http://concerto;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_set_header Host $http_host;
                    }
                }
          commands:
            01_mkdir:
              command: !Sub |
                mkdir -p /home/concerto/data/certbot/conf/dummy/${DomainName}
            02_dhparam:
              command: >-
                if [[ ! -e dhparam.pem ]]; then
                  openssl dhparam -out dhparam.pem 2048;
                fi
              cwd: /home/concerto/data/certbot/conf
            03_dummy_certs:
              command: !Sub >-
                if [[ ! -e fullchain.pem ]]; then
                  openssl req -x509 -nodes -newkey rsa:1024 -days 7 -keyout privkey.pem -out fullchain.pem -subj '/CN=${DomainName}';
                fi
              cwd: !Sub /home/concerto/data/certbot/conf/dummy/${DomainName}
        concerto:
          files:
            /home/concerto/docker-compose.yml:
              content: !Sub |
                version: '3'
                services:
                  database:
                    image: mysql:5.7
                    container_name: database
                    restart: unless-stopped
                    volumes:
                      - ./data/mysql:/var/lib/mysql
                    environment:
                      - MYSQL_DATABASE=concerto
                      - MYSQL_USER=concerto
                      - MYSQL_PASSWORD=${DBPassword}
                      - MYSQL_ROOT_PASSWORD=${DBPassword}
                      - TZ=${ConcertoTimezone}

                  concerto:
                    image: campsych/concerto-platform:${ConcertoVersion}
                    container_name: concerto
                    restart: unless-stopped
                    volumes:
                      - ./data/concerto:/data
                    environment:
                      - CONCERTO_PASSWORD=${ConcertoPassword}
                      - CONCERTO_CONTENT_URL=${ConcertoContentURL}
                      - CONCERTO_PLATFORM_URL=/
                      - CONCERTO_GIT_REPOSITORY_PATH=/data/git
                      - CONCERTO_SESSION_LIMIT=${ConcertoSessionLimit}
                      - DB_HOST=database
                      - DB_PASSWORD=${DBPassword}
                      - TZ=${ConcertoTimezone}

                  nginx:
                    image: nginx
                    container_name: nginx
                    restart: unless-stopped
                    volumes:
                      - ./data/nginx:/etc/nginx/conf.d
                      - ./data/certbot/conf:/etc/letsencrypt
                      - ./data/certbot/www:/var/www/certbot
                    ports:
                      - "80:80"
                      - "443:443"
                    command: "/bin/sh -c 'trap exit TERM; while :; do sleep 15m & wait $${!!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

                  certbot:
                    image: certbot/certbot
                    container_name: certbot
                    restart: unless-stopped
                    volumes:
                      - ./data/nginx:/etc/nginx/conf.d
                      - ./data/certbot/conf:/etc/letsencrypt
                      - ./data/certbot/www:/var/www/certbot
                    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot certonly --non-interactive --webroot -w /var/www/certbot --email ${Email} -d ${DomainName} --agree-tos --deploy-hook \"sed -i s/dummy/live/g /etc/nginx/conf.d/app.conf\" || true; sleep 15m & wait $${!!}; done;'"
          commands:
            start:
              command: /usr/local/bin/docker-compose up -d --remove-orphans --force-recreate
              cwd: /home/concerto
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - ami
      InstanceType: !Ref WebServerInstanceType
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          yum update --security -y
          yum -y install aws-cfn-bootstrap
          amazon-linux-extras install -y docker
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetA
          GroupSet:
            - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  URL:
    Value: !Sub https://${DomainName}/admin
    Description: Concerto administration panel URL
  ServerIP:
    Value: !GetAtt WebServerInstance.PublicIp
    Description: IP address to point your domain to (i.e. with A record)
  ConcertoVersion:
    Value: !Ref ConcertoVersion
    Description: Concerto version being used
  ConcertoPassword:
    Value: !Ref ConcertoPassword
    Description: Concerto admin password
  DBPassword:
    Value: !Ref DBPassword
    Description: Database password
